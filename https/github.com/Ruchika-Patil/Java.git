There are two arrays: a and b of type integer. Make two threads to sort: a and b.
Make a third thread to merge these two arrays into array: c. The method: main should display array c.  

Answer:

import java.util.Arrays;
import java.util.Random;

public class Main{
  public static void main(String[] args){
	  Shared Shared1 = new Shared();
    Random r = new Random(System.currentTimeMillis());
    int n = r.nextInt(101) + 50;
    int[] a = new int[n];
    for(int i = 0; i < n; i++)
      a[i] = r.nextInt(100);
 // Create thread A for sorting array a
// Given names to threads to set and get array a and b values in Implements Runnable class
    mySortThread threadA = new mySortThread("threadA",a); 
    threadA.start();
    
    n = r.nextInt(101) + 50;
    int[] b = new int[n];
    for(int i = 0; i < n; i++)
    b[i] = r.nextInt(100);
// Create thread B for sorting array b
    mySortThread threadB = new mySortThread("threadB",b);
    threadB.start();
    
    threadA.join();
    threadB.join();
    
    int[] SortArray_A = Shared1.GetValuesA();
    int[] SortArray_B = Shared1.GetValuesB();
    
    System.out.println("Array A :" + Arrays.toString(SortArray_A));
    System.out.println("Array B :" + Arrays.toString(SortArray_B));

// Create thread C for merging array a and b
    MergeThread threadC = new MergeThread(SortArray_A,SortArray_B);    threadC.start();
    threadC.join();
    
    System.out.println(Arrays.toString(threadC.get()));
  }

}

class mySortThread implements Runnable{
	int[] a1;
	int[] c1;
	String name;
	private Thread t;
	Shared Shared1 = new Shared(); //Create Shared Object to get values in main method

	public mySortThread(String name,  int[] a1) {
		this.a1 =a1;
		this.name=name;
    }
	public void start(){ //Start a thread
		if(t == null){
			t = new Thread(this,name);
//Exception handling, there will be problem when thread starts			
			try{
				t.start();
				System.out.println("Start : "+ this.name);
			    }catch(Exception e){
			      System.out.println("Eror: " + e);
			      System.exit(0);
			    }
		}
	}
	public void join(){
		try{
		      t.join();    // End a thread
		      System.out.println("End : "+ this.name);
		    }catch(Exception e){
		      System.out.println("Eror: " + e);
		      System.exit(0);
		    }
	}
	    public void run(){  
// Create SortThread class for sorting array a and b
    		SortThread st = new SortThread(a1); 
       	    st.sort(a1); // Sorting method for array a and b 
       	    int[] Sort_Value = st.get(); //Getting values after sorting array a and b
       	 
       	 if(this.name == "threadA"){
       	    Shared1.SetA(Sort_Value);
       	 } else {
       		 Shared1.SetB(Sort_Value);
       	 }
    }
}
 class Shared{  // Get values of sorted array a and b in main method
	  static int[] a;
	  static int[] b;
//Critical Section access mutually exclusively by two different threads with synchronized. 
	  synchronized void SetA(int[] a){ 
		  Shared.a = a;
	  }
	  
	  synchronized void SetB(int[] b){
		  Shared.b = b;
	  }
	  
	  public  int[]  GetValuesA(){
		return Shared.a;
		  
	  }
	  public  int[]  GetValuesB(){
		return Shared.b;
		  
	  }
}

public class SortThread {
  int[] x; 
  
  public SortThread(int[] x){
    this.x = x;
//    run();    //Once this class is a thread remove this call
  }
  
  public void run(){
      sort(x);
  }
    
    public void sort(int[] x){
        for(int i = 0; i < x.length ; i++){
          int indexOfSmallest = findIndexOfSmallest(x, i);
          int t = x[i];
          x[i] = x[indexOfSmallest];
          x[indexOfSmallest] = t;
          
        }
      } 
    
    private int findIndexOfSmallest(int[] a, int from){
        int indexOfSmallest = from;

        for(int i = from; i < a.length; i++)
          if(a[i] < a[indexOfSmallest])
            indexOfSmallest = i;
        return indexOfSmallest;
      }
    
    public int[] get(){
        return x;
      }
}

public class MergeThread implements Runnable{
  int[] a;
  int[] b;
  int[] c;
  private Thread t;

  public MergeThread(int[] a, int[] b){
    this.a = a;
    this.b = b;
    c = new int[a.length + b.length];
   
//    run();      //Once this class is a thread remove this call
  }
  public void run(){
    merge();
  }
  public void start(){
		if(t == null){
			t = new Thread(this,"MergeThread");
			try{
				t.start();
				System.out.println("Start : MergeThread ");
			    }catch(Exception e){
			      System.out.println("Eror: " + e);
			      System.exit(0);
			    }
		}
	}
  public void join(){
		try{
		      t.join();
		      System.out.println("End : MergeThread ");
		    }catch(Exception e){
		      System.out.println("Eror: " + e);
		      System.exit(0);
		    }
	}
  
  private void merge(){
    int aIndex = 0, bIndex = 0, cIndex = 0;
    while(aIndex < a.length && bIndex < b.length)
      if(a[aIndex] < b[bIndex])
        c[cIndex++] = a[aIndex++];
      else
        c[cIndex++] = b[bIndex++];

    while(aIndex < a.length)
      c[cIndex++] = a[aIndex++];
    
    while(bIndex < b.length)
      c[cIndex++] = b[bIndex++];
  }
  
  public synchronized int[] get(){
    return c;
  }
  
}
